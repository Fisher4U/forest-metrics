/**
 * Autogenerated by Thrift
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.zhizus.forest.metrics.gen;

import java.util.*;

public class MetaReq implements org.apache.thrift.TBase<MetaReq, MetaReq._Fields>, java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MetaReq");

    private static final org.apache.thrift.protocol.TField CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("configId", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField URI_FIELD_DESC = new org.apache.thrift.protocol.TField("uri", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField COUNT_FIELD_DESC = new org.apache.thrift.protocol.TField("count", org.apache.thrift.protocol.TType.I32, (short) 3);
    private static final org.apache.thrift.protocol.TField TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("time", org.apache.thrift.protocol.TType.I64, (short) 4);
    private static final org.apache.thrift.protocol.TField MAX_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("maxTime", org.apache.thrift.protocol.TType.I32, (short) 5);
    private static final org.apache.thrift.protocol.TField MIN_TIME_FIELD_DESC = new org.apache.thrift.protocol.TField("minTime", org.apache.thrift.protocol.TType.I32, (short) 6);
    private static final org.apache.thrift.protocol.TField CODES_FIELD_DESC = new org.apache.thrift.protocol.TField("codes", org.apache.thrift.protocol.TType.LIST, (short) 7);

    public String configId;
    public String uri;
    public int count;
    public long time;
    public int maxTime;
    public int minTime;
    public List<Integer> codes;

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        CONFIG_ID((short) 1, "configId"),
        URI((short) 2, "uri"),
        COUNT((short) 3, "count"),
        TIME((short) 4, "time"),
        MAX_TIME((short) 5, "maxTime"),
        MIN_TIME((short) 6, "minTime"),
        CODES((short) 7, "codes");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // CONFIG_ID
                    return CONFIG_ID;
                case 2: // URI
                    return URI;
                case 3: // COUNT
                    return COUNT;
                case 4: // TIME
                    return TIME;
                case 5: // MAX_TIME
                    return MAX_TIME;
                case 6: // MIN_TIME
                    return MIN_TIME;
                case 7: // CODES
                    return CODES;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __COUNT_ISSET_ID = 0;
    private static final int __TIME_ISSET_ID = 1;
    private static final int __MAXTIME_ISSET_ID = 2;
    private static final int __MINTIME_ISSET_ID = 3;
    private BitSet __isset_bit_vector = new BitSet(4);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("configId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.URI, new org.apache.thrift.meta_data.FieldMetaData("uri", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.COUNT, new org.apache.thrift.meta_data.FieldMetaData("count", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.TIME, new org.apache.thrift.meta_data.FieldMetaData("time", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I64)));
        tmpMap.put(_Fields.MAX_TIME, new org.apache.thrift.meta_data.FieldMetaData("maxTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.MIN_TIME, new org.apache.thrift.meta_data.FieldMetaData("minTime", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32)));
        tmpMap.put(_Fields.CODES, new org.apache.thrift.meta_data.FieldMetaData("codes", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.ListMetaData(org.apache.thrift.protocol.TType.LIST,
                        new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I32))));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MetaReq.class, metaDataMap);
    }

    public MetaReq() {
    }

    public MetaReq(
            String uri,
            int count,
            long time,
            int maxTime,
            int minTime,
            List<Integer> codes) {
        this();
        this.uri = uri;
        this.count = count;
        setCountIsSet(true);
        this.time = time;
        setTimeIsSet(true);
        this.maxTime = maxTime;
        setMaxTimeIsSet(true);
        this.minTime = minTime;
        setMinTimeIsSet(true);
        this.codes = codes;
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MetaReq(MetaReq other) {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        if (other.isSetConfigId()) {
            this.configId = other.configId;
        }
        if (other.isSetUri()) {
            this.uri = other.uri;
        }
        this.count = other.count;
        this.time = other.time;
        this.maxTime = other.maxTime;
        this.minTime = other.minTime;
        if (other.isSetCodes()) {
            List<Integer> __this__codes = new ArrayList<Integer>();
            for (Integer other_element : other.codes) {
                __this__codes.add(other_element);
            }
            this.codes = __this__codes;
        }
    }

    public MetaReq deepCopy() {
        return new MetaReq(this);
    }

    @Override
    public void clear() {
        this.configId = null;
        this.uri = null;
        setCountIsSet(false);
        this.count = 0;
        setTimeIsSet(false);
        this.time = 0;
        setMaxTimeIsSet(false);
        this.maxTime = 0;
        setMinTimeIsSet(false);
        this.minTime = 0;
        this.codes = null;
    }

    public String getConfigId() {
        return this.configId;
    }

    public MetaReq setConfigId(String configId) {
        this.configId = configId;
        return this;
    }

    public void unsetConfigId() {
        this.configId = null;
    }

    /**
     * Returns true if field configId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetConfigId() {
        return this.configId != null;
    }

    public void setConfigIdIsSet(boolean value) {
        if (!value) {
            this.configId = null;
        }
    }

    public String getUri() {
        return this.uri;
    }

    public MetaReq setUri(String uri) {
        this.uri = uri;
        return this;
    }

    public void unsetUri() {
        this.uri = null;
    }

    /**
     * Returns true if field uri is set (has been assigned a value) and false otherwise
     */
    public boolean isSetUri() {
        return this.uri != null;
    }

    public void setUriIsSet(boolean value) {
        if (!value) {
            this.uri = null;
        }
    }

    public int getCount() {
        return this.count;
    }

    public MetaReq setCount(int count) {
        this.count = count;
        setCountIsSet(true);
        return this;
    }

    public void unsetCount() {
        __isset_bit_vector.clear(__COUNT_ISSET_ID);
    }

    /**
     * Returns true if field count is set (has been assigned a value) and false otherwise
     */
    public boolean isSetCount() {
        return __isset_bit_vector.get(__COUNT_ISSET_ID);
    }

    public void setCountIsSet(boolean value) {
        __isset_bit_vector.set(__COUNT_ISSET_ID, value);
    }

    public long getTime() {
        return this.time;
    }

    public MetaReq setTime(long time) {
        this.time = time;
        setTimeIsSet(true);
        return this;
    }

    public void unsetTime() {
        __isset_bit_vector.clear(__TIME_ISSET_ID);
    }

    /**
     * Returns true if field time is set (has been assigned a value) and false otherwise
     */
    public boolean isSetTime() {
        return __isset_bit_vector.get(__TIME_ISSET_ID);
    }

    public void setTimeIsSet(boolean value) {
        __isset_bit_vector.set(__TIME_ISSET_ID, value);
    }

    public int getMaxTime() {
        return this.maxTime;
    }

    public MetaReq setMaxTime(int maxTime) {
        this.maxTime = maxTime;
        setMaxTimeIsSet(true);
        return this;
    }

    public void unsetMaxTime() {
        __isset_bit_vector.clear(__MAXTIME_ISSET_ID);
    }

    /**
     * Returns true if field maxTime is set (has been assigned a value) and false otherwise
     */
    public boolean isSetMaxTime() {
        return __isset_bit_vector.get(__MAXTIME_ISSET_ID);
    }

    public void setMaxTimeIsSet(boolean value) {
        __isset_bit_vector.set(__MAXTIME_ISSET_ID, value);
    }

    public int getMinTime() {
        return this.minTime;
    }

    public MetaReq setMinTime(int minTime) {
        this.minTime = minTime;
        setMinTimeIsSet(true);
        return this;
    }

    public void unsetMinTime() {
        __isset_bit_vector.clear(__MINTIME_ISSET_ID);
    }

    /**
     * Returns true if field minTime is set (has been assigned a value) and false otherwise
     */
    public boolean isSetMinTime() {
        return __isset_bit_vector.get(__MINTIME_ISSET_ID);
    }

    public void setMinTimeIsSet(boolean value) {
        __isset_bit_vector.set(__MINTIME_ISSET_ID, value);
    }

    public int getCodesSize() {
        return (this.codes == null) ? 0 : this.codes.size();
    }

    public java.util.Iterator<Integer> getCodesIterator() {
        return (this.codes == null) ? null : this.codes.iterator();
    }

    public void addToCodes(int elem) {
        if (this.codes == null) {
            this.codes = new ArrayList<Integer>();
        }
        this.codes.add(elem);
    }

    public List<Integer> getCodes() {
        return this.codes;
    }

    public MetaReq setCodes(List<Integer> codes) {
        this.codes = codes;
        return this;
    }

    public void unsetCodes() {
        this.codes = null;
    }

    /**
     * Returns true if field codes is set (has been assigned a value) and false otherwise
     */
    public boolean isSetCodes() {
        return this.codes != null;
    }

    public void setCodesIsSet(boolean value) {
        if (!value) {
            this.codes = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case CONFIG_ID:
                if (value == null) {
                    unsetConfigId();
                } else {
                    setConfigId((String) value);
                }
                break;

            case URI:
                if (value == null) {
                    unsetUri();
                } else {
                    setUri((String) value);
                }
                break;

            case COUNT:
                if (value == null) {
                    unsetCount();
                } else {
                    setCount((Integer) value);
                }
                break;

            case TIME:
                if (value == null) {
                    unsetTime();
                } else {
                    setTime((Long) value);
                }
                break;

            case MAX_TIME:
                if (value == null) {
                    unsetMaxTime();
                } else {
                    setMaxTime((Integer) value);
                }
                break;

            case MIN_TIME:
                if (value == null) {
                    unsetMinTime();
                } else {
                    setMinTime((Integer) value);
                }
                break;

            case CODES:
                if (value == null) {
                    unsetCodes();
                } else {
                    setCodes((List<Integer>) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case CONFIG_ID:
                return getConfigId();

            case URI:
                return getUri();

            case COUNT:
                return new Integer(getCount());

            case TIME:
                return new Long(getTime());

            case MAX_TIME:
                return new Integer(getMaxTime());

            case MIN_TIME:
                return new Integer(getMinTime());

            case CODES:
                return getCodes();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case CONFIG_ID:
                return isSetConfigId();
            case URI:
                return isSetUri();
            case COUNT:
                return isSetCount();
            case TIME:
                return isSetTime();
            case MAX_TIME:
                return isSetMaxTime();
            case MIN_TIME:
                return isSetMinTime();
            case CODES:
                return isSetCodes();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof MetaReq)
            return this.equals((MetaReq) that);
        return false;
    }

    public boolean equals(MetaReq that) {
        if (that == null)
            return false;

        boolean this_present_configId = true && this.isSetConfigId();
        boolean that_present_configId = true && that.isSetConfigId();
        if (this_present_configId || that_present_configId) {
            if (!(this_present_configId && that_present_configId))
                return false;
            if (!this.configId.equals(that.configId))
                return false;
        }

        boolean this_present_uri = true && this.isSetUri();
        boolean that_present_uri = true && that.isSetUri();
        if (this_present_uri || that_present_uri) {
            if (!(this_present_uri && that_present_uri))
                return false;
            if (!this.uri.equals(that.uri))
                return false;
        }

        boolean this_present_count = true;
        boolean that_present_count = true;
        if (this_present_count || that_present_count) {
            if (!(this_present_count && that_present_count))
                return false;
            if (this.count != that.count)
                return false;
        }

        boolean this_present_time = true;
        boolean that_present_time = true;
        if (this_present_time || that_present_time) {
            if (!(this_present_time && that_present_time))
                return false;
            if (this.time != that.time)
                return false;
        }

        boolean this_present_maxTime = true;
        boolean that_present_maxTime = true;
        if (this_present_maxTime || that_present_maxTime) {
            if (!(this_present_maxTime && that_present_maxTime))
                return false;
            if (this.maxTime != that.maxTime)
                return false;
        }

        boolean this_present_minTime = true;
        boolean that_present_minTime = true;
        if (this_present_minTime || that_present_minTime) {
            if (!(this_present_minTime && that_present_minTime))
                return false;
            if (this.minTime != that.minTime)
                return false;
        }

        boolean this_present_codes = true && this.isSetCodes();
        boolean that_present_codes = true && that.isSetCodes();
        if (this_present_codes || that_present_codes) {
            if (!(this_present_codes && that_present_codes))
                return false;
            if (!this.codes.equals(that.codes))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(MetaReq other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        MetaReq typedOther = (MetaReq) other;

        lastComparison = Boolean.valueOf(isSetConfigId()).compareTo(typedOther.isSetConfigId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetConfigId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configId, typedOther.configId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetUri()).compareTo(typedOther.isSetUri());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetUri()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.uri, typedOther.uri);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCount()).compareTo(typedOther.isSetCount());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCount()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.count, typedOther.count);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetTime()).compareTo(typedOther.isSetTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.time, typedOther.time);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMaxTime()).compareTo(typedOther.isSetMaxTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMaxTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.maxTime, typedOther.maxTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetMinTime()).compareTo(typedOther.isSetMinTime());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetMinTime()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.minTime, typedOther.minTime);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetCodes()).compareTo(typedOther.isSetCodes());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCodes()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.codes, typedOther.codes);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == org.apache.thrift.protocol.TType.STOP) {
                break;
            }
            switch (field.id) {
                case 1: // CONFIG_ID
                    if (field.type == org.apache.thrift.protocol.TType.STRING) {
                        this.configId = iprot.readString();
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // URI
                    if (field.type == org.apache.thrift.protocol.TType.STRING) {
                        this.uri = iprot.readString();
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // COUNT
                    if (field.type == org.apache.thrift.protocol.TType.I32) {
                        this.count = iprot.readI32();
                        setCountIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 4: // TIME
                    if (field.type == org.apache.thrift.protocol.TType.I64) {
                        this.time = iprot.readI64();
                        setTimeIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 5: // MAX_TIME
                    if (field.type == org.apache.thrift.protocol.TType.I32) {
                        this.maxTime = iprot.readI32();
                        setMaxTimeIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 6: // MIN_TIME
                    if (field.type == org.apache.thrift.protocol.TType.I32) {
                        this.minTime = iprot.readI32();
                        setMinTimeIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 7: // CODES
                    if (field.type == org.apache.thrift.protocol.TType.LIST) {
                        {
                            org.apache.thrift.protocol.TList _list0 = iprot.readListBegin();
                            this.codes = new ArrayList<Integer>(_list0.size);
                            for (int _i1 = 0; _i1 < _list0.size; ++_i1) {
                                int _elem2;
                                _elem2 = iprot.readI32();
                                this.codes.add(_elem2);
                            }
                            iprot.readListEnd();
                        }
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (this.configId != null) {
            if (isSetConfigId()) {
                oprot.writeFieldBegin(CONFIG_ID_FIELD_DESC);
                oprot.writeString(this.configId);
                oprot.writeFieldEnd();
            }
        }
        if (this.uri != null) {
            oprot.writeFieldBegin(URI_FIELD_DESC);
            oprot.writeString(this.uri);
            oprot.writeFieldEnd();
        }
        oprot.writeFieldBegin(COUNT_FIELD_DESC);
        oprot.writeI32(this.count);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(TIME_FIELD_DESC);
        oprot.writeI64(this.time);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MAX_TIME_FIELD_DESC);
        oprot.writeI32(this.maxTime);
        oprot.writeFieldEnd();
        oprot.writeFieldBegin(MIN_TIME_FIELD_DESC);
        oprot.writeI32(this.minTime);
        oprot.writeFieldEnd();
        if (this.codes != null) {
            oprot.writeFieldBegin(CODES_FIELD_DESC);
            {
                oprot.writeListBegin(new org.apache.thrift.protocol.TList(org.apache.thrift.protocol.TType.I32, this.codes.size()));
                for (int _iter3 : this.codes) {
                    oprot.writeI32(_iter3);
                }
                oprot.writeListEnd();
            }
            oprot.writeFieldEnd();
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("MetaReq(");
        boolean first = true;

        if (isSetConfigId()) {
            sb.append("configId:");
            if (this.configId == null) {
                sb.append("null");
            } else {
                sb.append(this.configId);
            }
            first = false;
        }
        if (!first) sb.append(", ");
        sb.append("uri:");
        if (this.uri == null) {
            sb.append("null");
        } else {
            sb.append(this.uri);
        }
        first = false;
        if (!first) sb.append(", ");
        sb.append("count:");
        sb.append(this.count);
        first = false;
        if (!first) sb.append(", ");
        sb.append("time:");
        sb.append(this.time);
        first = false;
        if (!first) sb.append(", ");
        sb.append("maxTime:");
        sb.append(this.maxTime);
        first = false;
        if (!first) sb.append(", ");
        sb.append("minTime:");
        sb.append(this.minTime);
        first = false;
        if (!first) sb.append(", ");
        sb.append("codes:");
        if (this.codes == null) {
            sb.append("null");
        } else {
            sb.append(this.codes);
        }
        first = false;
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bit_vector = new BitSet(1);
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

}

