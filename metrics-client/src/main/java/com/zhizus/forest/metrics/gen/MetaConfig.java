/**
 * Autogenerated by Thrift
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.zhizus.forest.metrics.gen;

import java.util.*;

public class MetaConfig implements org.apache.thrift.TBase<MetaConfig, MetaConfig._Fields>, java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("MetaConfig");

    private static final org.apache.thrift.protocol.TField SERVICE_NAME_FIELD_DESC = new org.apache.thrift.protocol.TField("serviceName", org.apache.thrift.protocol.TType.STRING, (short) 1);
    private static final org.apache.thrift.protocol.TField IP_FIELD_DESC = new org.apache.thrift.protocol.TField("ip", org.apache.thrift.protocol.TType.STRING, (short) 2);
    private static final org.apache.thrift.protocol.TField ROOM_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("roomId", org.apache.thrift.protocol.TType.STRING, (short) 3);
    private static final org.apache.thrift.protocol.TField VERSION_FIELD_DESC = new org.apache.thrift.protocol.TField("version", org.apache.thrift.protocol.TType.STRING, (short) 4);
    private static final org.apache.thrift.protocol.TField TYPE_FIELD_DESC = new org.apache.thrift.protocol.TField("type", org.apache.thrift.protocol.TType.STRING, (short) 5);

    public String serviceName;
    public String ip;
    public String roomId;
    public String version;
    public String type;

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        SERVICE_NAME((short) 1, "serviceName"),
        IP((short) 2, "ip"),
        ROOM_ID((short) 3, "roomId"),
        VERSION((short) 4, "version"),
        TYPE((short) 5, "type");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // SERVICE_NAME
                    return SERVICE_NAME;
                case 2: // IP
                    return IP;
                case 3: // ROOM_ID
                    return ROOM_ID;
                case 4: // VERSION
                    return VERSION;
                case 5: // TYPE
                    return TYPE;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.SERVICE_NAME, new org.apache.thrift.meta_data.FieldMetaData("serviceName", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.IP, new org.apache.thrift.meta_data.FieldMetaData("ip", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.ROOM_ID, new org.apache.thrift.meta_data.FieldMetaData("roomId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.VERSION, new org.apache.thrift.meta_data.FieldMetaData("version", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        tmpMap.put(_Fields.TYPE, new org.apache.thrift.meta_data.FieldMetaData("type", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(MetaConfig.class, metaDataMap);
    }

    public MetaConfig() {
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public MetaConfig(MetaConfig other) {
        if (other.isSetServiceName()) {
            this.serviceName = other.serviceName;
        }
        if (other.isSetIp()) {
            this.ip = other.ip;
        }
        if (other.isSetRoomId()) {
            this.roomId = other.roomId;
        }
        if (other.isSetVersion()) {
            this.version = other.version;
        }
        if (other.isSetType()) {
            this.type = other.type;
        }
    }

    public MetaConfig deepCopy() {
        return new MetaConfig(this);
    }

    @Override
    public void clear() {
        this.serviceName = null;
        this.ip = null;
        this.roomId = null;
        this.version = null;
        this.type = null;
    }

    public String getServiceName() {
        return this.serviceName;
    }

    public MetaConfig setServiceName(String serviceName) {
        this.serviceName = serviceName;
        return this;
    }

    public void unsetServiceName() {
        this.serviceName = null;
    }

    /**
     * Returns true if field serviceName is set (has been assigned a value) and false otherwise
     */
    public boolean isSetServiceName() {
        return this.serviceName != null;
    }

    public void setServiceNameIsSet(boolean value) {
        if (!value) {
            this.serviceName = null;
        }
    }

    public String getIp() {
        return this.ip;
    }

    public MetaConfig setIp(String ip) {
        this.ip = ip;
        return this;
    }

    public void unsetIp() {
        this.ip = null;
    }

    /**
     * Returns true if field ip is set (has been assigned a value) and false otherwise
     */
    public boolean isSetIp() {
        return this.ip != null;
    }

    public void setIpIsSet(boolean value) {
        if (!value) {
            this.ip = null;
        }
    }

    public String getRoomId() {
        return this.roomId;
    }

    public MetaConfig setRoomId(String roomId) {
        this.roomId = roomId;
        return this;
    }

    public void unsetRoomId() {
        this.roomId = null;
    }

    /**
     * Returns true if field roomId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetRoomId() {
        return this.roomId != null;
    }

    public void setRoomIdIsSet(boolean value) {
        if (!value) {
            this.roomId = null;
        }
    }

    public String getVersion() {
        return this.version;
    }

    public MetaConfig setVersion(String version) {
        this.version = version;
        return this;
    }

    public void unsetVersion() {
        this.version = null;
    }

    /**
     * Returns true if field version is set (has been assigned a value) and false otherwise
     */
    public boolean isSetVersion() {
        return this.version != null;
    }

    public void setVersionIsSet(boolean value) {
        if (!value) {
            this.version = null;
        }
    }

    public String getType() {
        return this.type;
    }

    public MetaConfig setType(String type) {
        this.type = type;
        return this;
    }

    public void unsetType() {
        this.type = null;
    }

    /**
     * Returns true if field type is set (has been assigned a value) and false otherwise
     */
    public boolean isSetType() {
        return this.type != null;
    }

    public void setTypeIsSet(boolean value) {
        if (!value) {
            this.type = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case SERVICE_NAME:
                if (value == null) {
                    unsetServiceName();
                } else {
                    setServiceName((String) value);
                }
                break;

            case IP:
                if (value == null) {
                    unsetIp();
                } else {
                    setIp((String) value);
                }
                break;

            case ROOM_ID:
                if (value == null) {
                    unsetRoomId();
                } else {
                    setRoomId((String) value);
                }
                break;

            case VERSION:
                if (value == null) {
                    unsetVersion();
                } else {
                    setVersion((String) value);
                }
                break;

            case TYPE:
                if (value == null) {
                    unsetType();
                } else {
                    setType((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case SERVICE_NAME:
                return getServiceName();

            case IP:
                return getIp();

            case ROOM_ID:
                return getRoomId();

            case VERSION:
                return getVersion();

            case TYPE:
                return getType();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case SERVICE_NAME:
                return isSetServiceName();
            case IP:
                return isSetIp();
            case ROOM_ID:
                return isSetRoomId();
            case VERSION:
                return isSetVersion();
            case TYPE:
                return isSetType();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof MetaConfig)
            return this.equals((MetaConfig) that);
        return false;
    }

    public boolean equals(MetaConfig that) {
        if (that == null)
            return false;

        boolean this_present_serviceName = true && this.isSetServiceName();
        boolean that_present_serviceName = true && that.isSetServiceName();
        if (this_present_serviceName || that_present_serviceName) {
            if (!(this_present_serviceName && that_present_serviceName))
                return false;
            if (!this.serviceName.equals(that.serviceName))
                return false;
        }

        boolean this_present_ip = true && this.isSetIp();
        boolean that_present_ip = true && that.isSetIp();
        if (this_present_ip || that_present_ip) {
            if (!(this_present_ip && that_present_ip))
                return false;
            if (!this.ip.equals(that.ip))
                return false;
        }

        boolean this_present_roomId = true && this.isSetRoomId();
        boolean that_present_roomId = true && that.isSetRoomId();
        if (this_present_roomId || that_present_roomId) {
            if (!(this_present_roomId && that_present_roomId))
                return false;
            if (!this.roomId.equals(that.roomId))
                return false;
        }

        boolean this_present_version = true && this.isSetVersion();
        boolean that_present_version = true && that.isSetVersion();
        if (this_present_version || that_present_version) {
            if (!(this_present_version && that_present_version))
                return false;
            if (!this.version.equals(that.version))
                return false;
        }

        boolean this_present_type = true && this.isSetType();
        boolean that_present_type = true && that.isSetType();
        if (this_present_type || that_present_type) {
            if (!(this_present_type && that_present_type))
                return false;
            if (!this.type.equals(that.type))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(MetaConfig other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        MetaConfig typedOther = (MetaConfig) other;

        lastComparison = Boolean.valueOf(isSetServiceName()).compareTo(typedOther.isSetServiceName());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetServiceName()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.serviceName, typedOther.serviceName);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetIp()).compareTo(typedOther.isSetIp());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetIp()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.ip, typedOther.ip);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetRoomId()).compareTo(typedOther.isSetRoomId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetRoomId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.roomId, typedOther.roomId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetVersion()).compareTo(typedOther.isSetVersion());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetVersion()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.version, typedOther.version);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetType()).compareTo(typedOther.isSetType());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetType()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.type, typedOther.type);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == org.apache.thrift.protocol.TType.STOP) {
                break;
            }
            switch (field.id) {
                case 1: // SERVICE_NAME
                    if (field.type == org.apache.thrift.protocol.TType.STRING) {
                        this.serviceName = iprot.readString();
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // IP
                    if (field.type == org.apache.thrift.protocol.TType.STRING) {
                        this.ip = iprot.readString();
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 3: // ROOM_ID
                    if (field.type == org.apache.thrift.protocol.TType.STRING) {
                        this.roomId = iprot.readString();
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 4: // VERSION
                    if (field.type == org.apache.thrift.protocol.TType.STRING) {
                        this.version = iprot.readString();
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 5: // TYPE
                    if (field.type == org.apache.thrift.protocol.TType.STRING) {
                        this.type = iprot.readString();
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        if (this.serviceName != null) {
            if (isSetServiceName()) {
                oprot.writeFieldBegin(SERVICE_NAME_FIELD_DESC);
                oprot.writeString(this.serviceName);
                oprot.writeFieldEnd();
            }
        }
        if (this.ip != null) {
            if (isSetIp()) {
                oprot.writeFieldBegin(IP_FIELD_DESC);
                oprot.writeString(this.ip);
                oprot.writeFieldEnd();
            }
        }
        if (this.roomId != null) {
            if (isSetRoomId()) {
                oprot.writeFieldBegin(ROOM_ID_FIELD_DESC);
                oprot.writeString(this.roomId);
                oprot.writeFieldEnd();
            }
        }
        if (this.version != null) {
            if (isSetVersion()) {
                oprot.writeFieldBegin(VERSION_FIELD_DESC);
                oprot.writeString(this.version);
                oprot.writeFieldEnd();
            }
        }
        if (this.type != null) {
            if (isSetType()) {
                oprot.writeFieldBegin(TYPE_FIELD_DESC);
                oprot.writeString(this.type);
                oprot.writeFieldEnd();
            }
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("MetaConfig(");
        boolean first = true;

        if (isSetServiceName()) {
            sb.append("serviceName:");
            if (this.serviceName == null) {
                sb.append("null");
            } else {
                sb.append(this.serviceName);
            }
            first = false;
        }
        if (isSetIp()) {
            if (!first) sb.append(", ");
            sb.append("ip:");
            if (this.ip == null) {
                sb.append("null");
            } else {
                sb.append(this.ip);
            }
            first = false;
        }
        if (isSetRoomId()) {
            if (!first) sb.append(", ");
            sb.append("roomId:");
            if (this.roomId == null) {
                sb.append("null");
            } else {
                sb.append(this.roomId);
            }
            first = false;
        }
        if (isSetVersion()) {
            if (!first) sb.append(", ");
            sb.append("version:");
            if (this.version == null) {
                sb.append("null");
            } else {
                sb.append(this.version);
            }
            first = false;
        }
        if (isSetType()) {
            if (!first) sb.append(", ");
            sb.append("type:");
            if (this.type == null) {
                sb.append("null");
            } else {
                sb.append(this.type);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

}

