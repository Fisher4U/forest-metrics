/**
 * Autogenerated by Thrift
 * <p>
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 */
package com.zhizus.forest.metrics.gen;

import java.util.*;

public class Ack implements org.apache.thrift.TBase<Ack, Ack._Fields>, java.io.Serializable, Cloneable {
    private static final org.apache.thrift.protocol.TStruct STRUCT_DESC = new org.apache.thrift.protocol.TStruct("Ack");

    private static final org.apache.thrift.protocol.TField CODE_FIELD_DESC = new org.apache.thrift.protocol.TField("code", org.apache.thrift.protocol.TType.I16, (short) 1);
    private static final org.apache.thrift.protocol.TField CONFIG_ID_FIELD_DESC = new org.apache.thrift.protocol.TField("configId", org.apache.thrift.protocol.TType.STRING, (short) 2);

    public short code;
    public String configId;

    /**
     * The set of fields this struct contains, along with convenience methods for finding and manipulating them.
     */
    public enum _Fields implements org.apache.thrift.TFieldIdEnum {
        CODE((short) 1, "code"),
        CONFIG_ID((short) 2, "configId");

        private static final Map<String, _Fields> byName = new HashMap<String, _Fields>();

        static {
            for (_Fields field : EnumSet.allOf(_Fields.class)) {
                byName.put(field.getFieldName(), field);
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, or null if its not found.
         */
        public static _Fields findByThriftId(int fieldId) {
            switch (fieldId) {
                case 1: // CODE
                    return CODE;
                case 2: // CONFIG_ID
                    return CONFIG_ID;
                default:
                    return null;
            }
        }

        /**
         * Find the _Fields constant that matches fieldId, throwing an exception
         * if it is not found.
         */
        public static _Fields findByThriftIdOrThrow(int fieldId) {
            _Fields fields = findByThriftId(fieldId);
            if (fields == null) throw new IllegalArgumentException("Field " + fieldId + " doesn't exist!");
            return fields;
        }

        /**
         * Find the _Fields constant that matches name, or null if its not found.
         */
        public static _Fields findByName(String name) {
            return byName.get(name);
        }

        private final short _thriftId;
        private final String _fieldName;

        _Fields(short thriftId, String fieldName) {
            _thriftId = thriftId;
            _fieldName = fieldName;
        }

        public short getThriftFieldId() {
            return _thriftId;
        }

        public String getFieldName() {
            return _fieldName;
        }
    }

    // isset id assignments
    private static final int __CODE_ISSET_ID = 0;
    private BitSet __isset_bit_vector = new BitSet(1);

    public static final Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> metaDataMap;

    static {
        Map<_Fields, org.apache.thrift.meta_data.FieldMetaData> tmpMap = new EnumMap<_Fields, org.apache.thrift.meta_data.FieldMetaData>(_Fields.class);
        tmpMap.put(_Fields.CODE, new org.apache.thrift.meta_data.FieldMetaData("code", org.apache.thrift.TFieldRequirementType.DEFAULT,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.I16)));
        tmpMap.put(_Fields.CONFIG_ID, new org.apache.thrift.meta_data.FieldMetaData("configId", org.apache.thrift.TFieldRequirementType.OPTIONAL,
                new org.apache.thrift.meta_data.FieldValueMetaData(org.apache.thrift.protocol.TType.STRING)));
        metaDataMap = Collections.unmodifiableMap(tmpMap);
        org.apache.thrift.meta_data.FieldMetaData.addStructMetaDataMap(Ack.class, metaDataMap);
    }

    public Ack() {
    }

    public Ack(
            short code) {
        this();
        this.code = code;
        setCodeIsSet(true);
    }

    /**
     * Performs a deep copy on <i>other</i>.
     */
    public Ack(Ack other) {
        __isset_bit_vector.clear();
        __isset_bit_vector.or(other.__isset_bit_vector);
        this.code = other.code;
        if (other.isSetConfigId()) {
            this.configId = other.configId;
        }
    }

    public Ack deepCopy() {
        return new Ack(this);
    }

    @Override
    public void clear() {
        setCodeIsSet(false);
        this.code = 0;
        this.configId = null;
    }

    public short getCode() {
        return this.code;
    }

    public Ack setCode(short code) {
        this.code = code;
        setCodeIsSet(true);
        return this;
    }

    public void unsetCode() {
        __isset_bit_vector.clear(__CODE_ISSET_ID);
    }

    /**
     * Returns true if field code is set (has been assigned a value) and false otherwise
     */
    public boolean isSetCode() {
        return __isset_bit_vector.get(__CODE_ISSET_ID);
    }

    public void setCodeIsSet(boolean value) {
        __isset_bit_vector.set(__CODE_ISSET_ID, value);
    }

    public String getConfigId() {
        return this.configId;
    }

    public Ack setConfigId(String configId) {
        this.configId = configId;
        return this;
    }

    public void unsetConfigId() {
        this.configId = null;
    }

    /**
     * Returns true if field configId is set (has been assigned a value) and false otherwise
     */
    public boolean isSetConfigId() {
        return this.configId != null;
    }

    public void setConfigIdIsSet(boolean value) {
        if (!value) {
            this.configId = null;
        }
    }

    public void setFieldValue(_Fields field, Object value) {
        switch (field) {
            case CODE:
                if (value == null) {
                    unsetCode();
                } else {
                    setCode((Short) value);
                }
                break;

            case CONFIG_ID:
                if (value == null) {
                    unsetConfigId();
                } else {
                    setConfigId((String) value);
                }
                break;

        }
    }

    public Object getFieldValue(_Fields field) {
        switch (field) {
            case CODE:
                return new Short(getCode());

            case CONFIG_ID:
                return getConfigId();

        }
        throw new IllegalStateException();
    }

    /**
     * Returns true if field corresponding to fieldID is set (has been assigned a value) and false otherwise
     */
    public boolean isSet(_Fields field) {
        if (field == null) {
            throw new IllegalArgumentException();
        }

        switch (field) {
            case CODE:
                return isSetCode();
            case CONFIG_ID:
                return isSetConfigId();
        }
        throw new IllegalStateException();
    }

    @Override
    public boolean equals(Object that) {
        if (that == null)
            return false;
        if (that instanceof Ack)
            return this.equals((Ack) that);
        return false;
    }

    public boolean equals(Ack that) {
        if (that == null)
            return false;

        boolean this_present_code = true;
        boolean that_present_code = true;
        if (this_present_code || that_present_code) {
            if (!(this_present_code && that_present_code))
                return false;
            if (this.code != that.code)
                return false;
        }

        boolean this_present_configId = true && this.isSetConfigId();
        boolean that_present_configId = true && that.isSetConfigId();
        if (this_present_configId || that_present_configId) {
            if (!(this_present_configId && that_present_configId))
                return false;
            if (!this.configId.equals(that.configId))
                return false;
        }

        return true;
    }

    @Override
    public int hashCode() {
        return 0;
    }

    public int compareTo(Ack other) {
        if (!getClass().equals(other.getClass())) {
            return getClass().getName().compareTo(other.getClass().getName());
        }

        int lastComparison = 0;
        Ack typedOther = (Ack) other;

        lastComparison = Boolean.valueOf(isSetCode()).compareTo(typedOther.isSetCode());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetCode()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.code, typedOther.code);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        lastComparison = Boolean.valueOf(isSetConfigId()).compareTo(typedOther.isSetConfigId());
        if (lastComparison != 0) {
            return lastComparison;
        }
        if (isSetConfigId()) {
            lastComparison = org.apache.thrift.TBaseHelper.compareTo(this.configId, typedOther.configId);
            if (lastComparison != 0) {
                return lastComparison;
            }
        }
        return 0;
    }

    public _Fields fieldForId(int fieldId) {
        return _Fields.findByThriftId(fieldId);
    }

    public void read(org.apache.thrift.protocol.TProtocol iprot) throws org.apache.thrift.TException {
        org.apache.thrift.protocol.TField field;
        iprot.readStructBegin();
        while (true) {
            field = iprot.readFieldBegin();
            if (field.type == org.apache.thrift.protocol.TType.STOP) {
                break;
            }
            switch (field.id) {
                case 1: // CODE
                    if (field.type == org.apache.thrift.protocol.TType.I16) {
                        this.code = iprot.readI16();
                        setCodeIsSet(true);
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                case 2: // CONFIG_ID
                    if (field.type == org.apache.thrift.protocol.TType.STRING) {
                        this.configId = iprot.readString();
                    } else {
                        org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
                    }
                    break;
                default:
                    org.apache.thrift.protocol.TProtocolUtil.skip(iprot, field.type);
            }
            iprot.readFieldEnd();
        }
        iprot.readStructEnd();

        // check for required fields of primitive type, which can't be checked in the validate method
        validate();
    }

    public void write(org.apache.thrift.protocol.TProtocol oprot) throws org.apache.thrift.TException {
        validate();

        oprot.writeStructBegin(STRUCT_DESC);
        oprot.writeFieldBegin(CODE_FIELD_DESC);
        oprot.writeI16(this.code);
        oprot.writeFieldEnd();
        if (this.configId != null) {
            if (isSetConfigId()) {
                oprot.writeFieldBegin(CONFIG_ID_FIELD_DESC);
                oprot.writeString(this.configId);
                oprot.writeFieldEnd();
            }
        }
        oprot.writeFieldStop();
        oprot.writeStructEnd();
    }

    @Override
    public String toString() {
        StringBuilder sb = new StringBuilder("Ack(");
        boolean first = true;

        sb.append("code:");
        sb.append(this.code);
        first = false;
        if (isSetConfigId()) {
            if (!first) sb.append(", ");
            sb.append("configId:");
            if (this.configId == null) {
                sb.append("null");
            } else {
                sb.append(this.configId);
            }
            first = false;
        }
        sb.append(")");
        return sb.toString();
    }

    public void validate() throws org.apache.thrift.TException {
        // check for required fields
    }

    private void writeObject(java.io.ObjectOutputStream out) throws java.io.IOException {
        try {
            write(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(out)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

    private void readObject(java.io.ObjectInputStream in) throws java.io.IOException, ClassNotFoundException {
        try {
            // it doesn't seem like you should have to do this, but java serialization is wacky, and doesn't call the default constructor.
            __isset_bit_vector = new BitSet(1);
            read(new org.apache.thrift.protocol.TCompactProtocol(new org.apache.thrift.transport.TIOStreamTransport(in)));
        } catch (org.apache.thrift.TException te) {
            throw new java.io.IOException(te);
        }
    }

}

